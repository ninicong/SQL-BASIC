# Find the total amount of poster_qty paper ordered in the orders table.
SELECT SUM(poster_qty) AS poster_qty_total
FROM orders;

# Find the total amount of standard_qty paper ordered in the orders table.
SELECT SUM(standard_qty) AS standard_qty_total
FROM orders;

# Find the total dollar amount of sales using the total_amt_usd in the orders table.
SELECT SUM(total_amt_usd) AS total_amt_usd_total
FROM orders;

# Find the total amount spent on standard_amt_usd and gloss_amt_usd paper for each order in the orders table. 
# This should give a dollar amount for each order in the table.
SELECT standard_amt_usd + gloss_amt_usd AS total_standard_gloss
FROM orders;

# Find the standard_amt_usd per unit of standard_qty paper. Your solution should use both an aggregation and a mathematical operator.
SELECT SUM(standard_amt_usd)/SUM(standard_qty) AS average_standard_unit_price
FROM orders;

# When was the earliest order ever placed? You only need to return the date.
SELECT MIN(occurred_at) AS earliest_date
FROM orders;

# Try performing the same query as in question 1 without using an aggregation function. 
SELECT occurred_at
FROM orders
ORDER BY occurred_at
LIMIT 1;

#  When did the most recent (latest) web_event occur?
SELECT MAX(occurred_at) AS latest_date
FROM web_events;

# Try to perform the result of the previous query without using an aggregation function.
SELECT occurred_at
FROM web_events
ORDER BY occurred_at DESC
LIMIT 1;

# Find the mean (AVERAGE) amount spent per order on each paper type, as well as the mean amount of each paper type purchased per order. 
# Your final answer should have 6 values - one for each paper type for the average number of sales, as well as the average amount.
SELECT AVG(standard_qty) AS standard_mean,
       AVG(gloss_qty) AS gloss_mean,
       AVG(poster_qty) AS poster_mean,
       AVG(standard_amt_usd) AS standard_usd_mean,
       AVG(gloss_amt_usd) AS gloss_usd_mean,
       AVG(poster_amt_usd) AS poster_usd_mean
FROM orders;

# How many of the sales reps have more than 5 accounts that they manage?
SELECT s.id, COUNT(*)
FROM sales_reps s
JOIN accounts a
ON s.id = a.sales_rep_id
GROUP BY s.id
HAVING COUNT(a.name) > 5;

# How many accounts have more than 20 orders?
SELECT a.name, COUNT(*)
FROM accounts a
JOIN orders o 
ON a.id = o.account_id
GROUP BY a.name
HAVING COUNT(o.id) > 20;

# Which account has the most orders?
SELECT a.name, COUNT(*)
FROM accounts a
JOIN orders o 
ON a.id = o.account_id
GROUP BY a.name
ORDER BY COUNT(o.id) DESC
LIMIT 1;

# Which accounts spent more than 30,000 usd total across all orders?
SELECT a.name, SUM(o.total_amt_usd)
FROM accounts a
JOIN orders o 
ON a.id = o.account_id
GROUP BY a.name
HAVING SUM(o.total_amt_usd) > 30000;

# Which accounts spent less than 1,000 usd total across all orders?
SELECT a.name, SUM(o.total_amt_usd)
FROM accounts a
JOIN orders o 
ON a.id = o.account_id
GROUP BY a.name
HAVING SUM(o.total_amt_usd) < 1000;

# Which account has spent the most with us?
SELECT a.name, SUM(o.total_amt_usd)
FROM accounts a
JOIN orders o 
ON a.id = o.account_id
GROUP BY a.name
ORDER BY SUM(o.total_amt_usd) DESC
LIMIT 1;

# Which account has spent the least with us?
SELECT a.name, SUM(o.total_amt_usd)
FROM accounts a
JOIN orders o 
ON a.id = o.account_id
GROUP BY a.name
ORDER BY SUM(o.total_amt_usd)
LIMIT 1;

# Which accounts used facebook as a channel to contact customers more than 6 times?
SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*) > 6 AND w.channel = 'facebook'
ORDER BY use_of_channel;

# Which account used facebook most as a channel? 
SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
WHERE w.channel = 'facebook'
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 1;

# Which channel was most frequently used by most accounts?
SELECT w.channel, COUNT(w.channel) num_channel, a.name, COUNT(a.name) num_account
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY w.channel, a.name
ORDER BY COUNT(w.channel) DESC, COUNT(a.name) DESC
LIMIT 1;

